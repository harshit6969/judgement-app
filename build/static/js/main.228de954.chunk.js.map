{"version":3,"sources":["constants/images/Parmar.jpg","constants/images/Maadi.jpg","constants/images/Harshit.jpg","constants/images/Shanky.jpg","constants/images/Vikas.jpg","serviceWorker.js","players.js","data-access-layer/storage-helper.js","Views/Home.js","Components/StepperForm.js","Components/ScoreGraph.js","data-access-layer/game-helper.js","Views/Judgement.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","players","ID","Name","IsMF","Profile","Parmar","CurrentRoundScore","TotalScore","Scores","ColorCode","Shanky","Harshit","Maadi","Vikas","PLAYERS_KEY","setValue","key","value","console","log","localStorage","setItem","JSON","stringify","getValue","parse","getItem","getPlayers","setPlayers","arguments","length","undefined","GamesHome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Players","Game","isCreateModalOpen","isArrangeModalOpen","playerName","playerLogo","GamePlayers","startGame","bind","assertThisInitialized","startSortedGame","toggleAddPlayer","toggleArrangeModal","addNewPlayer","resetPlayers","deletePlayer","CurrentPlayers","forEach","player","IsPlaying","setState","TotalPlayers","push","hasError","errorInfo","GameId","uuidv","v4","history","Error","Math","random","toFixed","IsCustom","allPlayers","error","alert","index","findIndex","splice","_this2","react_default","a","createElement","Grid","container","direction","justify","alignItems","AppBar","position","Toolbar","Typography","variant","xs","Paper","elevation","Card","CardContent","component","color","gutterBottom","FormControl","required","FormGroup","map","FormControlLabel","control","Checkbox","checked","id","onChange","e","target","label","ListItem","button","ListItemAvatar","Avatar","src","ListItemText","primary","IconButton","onClick","Delete","FormHelperText","CardActions","Button","Dialog","open","onClose","DialogContent","DialogContentText","List","_ref","hidden","KeyboardArrowUp","_ref2","KeyboardArrowDown","DialogActions","TextField","autoFocus","margin","type","fullWidth","React","Component","withRouter","StepperForm","activeStep","RoundInProgress","TotalHands","MAX_HANDS","ceil","handleBeforeRoundSubmit","handleAfterRoundSubmit","flag","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","hasOwnProperty","parseInt","err","return","handleScoreUpload","toString","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Player","defineProperty","marks","_this3","DialogTitle","currentRounds","FormLabel","handleBack","disableBackdropClick","disableEscapeKeyDown","justifyContent","Fragment","InputLabel","Select","name","_this3$setState2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Number","input","Input","style","minWidth","MenuItem","Slider","min","step","generateMarks","max","_this3$setState3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","ScoreGraph","data","scores","chartData","react","dx_react_chart_material_ui_es","valueField","argumentField","dx_react_chart_es","GameHelper","App","URLPath","pathname","split","GameStarted","openPlayerHandler","table_headers","table_data","chart_data","leaderboard","seconds","updateScorecard","interval","setInterval","tick","Config","keys","clearInterval","rotatedElement","shift","headers","i","table_row","j","Leaderboard","toConsumableArray","sort","Player1","Player2","TotalRoundScore","Components_StepperForm","Container","sec_num","hours","floor","minutes","toHHMMSS","BottomNavigation","event","newValue","showLabels","BottomNavigationAction","icon","Restore_default","Apps_default","PlayCircleFilledWhite_default","spacing","item","Switch","sm","minHeight","md","lg","trump_color","backgroundColor","secondary","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","height","width","alt","ScoreGraph_ScoreGraph","ListItemSecondaryAction","maxWidth","dist_default","title","columns","options","filterType","rowsPerPage","fixedHeader","selectableRows","selectableRowsHeader","hist","createBrowserHistory","ReactDOM","render","react_router_dom","react_router","exact","path","Home","Judgement","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.228de954.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Parmar.b6aad3d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Maadi.8ad40e89.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Harshit.a15bf8da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Shanky.dd0e4a66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Vikas.783a3bfc.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Parmar from '../src/constants/images/Parmar.jpg'\nimport Maadi from '../src/constants/images/Maadi.jpg'\nimport Harshit from '../src/constants/images/Harshit.jpg'\nimport Shanky from '../src/constants/images/Shanky.jpg'\nimport Vikas from '../src/constants/images/Vikas.jpg'\n\nconst players = [\n    {\n        \"ID\": 0,\n        \"Name\": \"Parmar\",\n        \"IsMF\": true,\n        \"Profile\": Parmar,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#f06292\"\n    },\n    {\n        \"ID\": 1,\n        \"Name\": \"Sanket\",\n        \"IsMF\": true,\n        \"Profile\": Shanky,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,        Scores: [],\n        \"ColorCode\": \"#37474f\"\n    },\n    {\n        \"ID\": 2,\n        \"Name\": \"Harshit\",\n        \"IsMF\": false,\n        \"Profile\": Harshit,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#1976d2\"\n    },\n    {\n        \"ID\": 3,\n        \"Name\": \"Maadi\",\n        \"IsMF\": false,\n        \"Profile\": Maadi,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#2e7d32\"\n    },\n    {\n        \"ID\": 4,\n        \"Name\": \"Himanshu\",\n        \"IsMF\": false,\n        \"Profile\": \"\",\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#f57c00\"\n    },\n    {\n        \"ID\": 5,\n        \"Name\": \"Shivam\",\n        \"IsMF\": false,\n        \"Profile\": \"\",\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#f57c00\"\n    },\n    {\n        \"ID\": 8,\n        \"Name\": \"Vikas\",\n        \"IsMF\": false,\n        \"Profile\": Vikas,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#424242\"\n    }\n]\nexport default players;","import players from \"../players\";\nconst PLAYERS_KEY = \"players_XAED0069\";\n\nfunction setValue(key, value) {\n    console.log(value);\n    localStorage.setItem(key, JSON.stringify(value));\n}\n\nfunction getValue(key) {\n    return JSON.parse(localStorage.getItem(key))\n}\n\nfunction getPlayers() {\n    return getValue(PLAYERS_KEY) || players;\n}\n\nfunction setPlayers(value = players) {\n    return setValue(PLAYERS_KEY, value);\n}\n\nexport { setValue, getValue, getPlayers, setPlayers };","import React from 'react';\nimport { Grid, Typography, AppBar, Toolbar, Avatar, Paper, Card, CardContent, CardActions, Button, Dialog, DialogContent, DialogContentText, TextField, DialogActions, List, IconButton } from '@material-ui/core';\nimport { ListItem, ListItemAvatar, FormGroup, ListItemText, FormControl, Checkbox, FormHelperText, FormControlLabel } from '@material-ui/core';\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { withRouter } from \"react-router-dom\";\nimport { setValue, getPlayers, setPlayers } from '../data-access-layer/storage-helper'\nimport uuidv from 'uuid';\nimport { Delete, KeyboardArrowDown, KeyboardArrowUp } from '@material-ui/icons';\n\nclass GamesHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            Players: getPlayers(),\n            Game: \"Judgement\",\n            isCreateModalOpen: false,\n            isArrangeModalOpen: false,\n            playerName: \"\",\n            playerLogo: \"\",\n            GamePlayers: []\n        }\n        this.startGame = this.startGame.bind(this);\n        this.startSortedGame = this.startSortedGame.bind(this);\n        this.toggleAddPlayer = this.toggleAddPlayer.bind(this);\n        this.toggleArrangeModal = this.toggleArrangeModal.bind(this);\n        this.addNewPlayer = this.addNewPlayer.bind(this);\n        this.resetPlayers = this.resetPlayers.bind(this);\n        this.deletePlayer = this.deletePlayer.bind(this);\n    }\n\n    componentDidMount() {\n        let CurrentPlayers = this.state.Players;\n        CurrentPlayers.forEach(player => {\n            player.IsPlaying = false;\n        })\n        this.setState({ Players: CurrentPlayers });\n    }\n    startGame() {\n        let CurrentPlayers = this.state.Players;\n        let TotalPlayers = 0;\n        let GamePlayers = [];\n        CurrentPlayers.forEach(player => {\n            if (player.IsPlaying) {\n                TotalPlayers++;\n                GamePlayers.push(player)\n            }\n        });\n        if (TotalPlayers > 3 && TotalPlayers < 10) {\n            this.setState({ GamePlayers: GamePlayers, isArrangeModalOpen: true });\n            // let GameId = uuidv.v4();\n            // setValue(GameId, { Players: GamePlayers });\n            // this.props.history.push('/' + this.state.Game + '/' + GameId);\n        } else {\n            this.setState({ GamePlayers: [], isArrangeModalOpen: false });\n            this.setState({ hasError: true, errorInfo: \"Player count not suitable for the game\" })\n        }\n    }\n    startSortedGame() {\n        let GameId = uuidv.v4();\n        setValue(GameId, { Players: this.state.GamePlayers });\n        this.props.history.push('/' + this.state.Game + '/' + GameId);\n    }\n    toggleAddPlayer() {\n        this.setState({ isCreateModalOpen: !this.state.isCreateModalOpen });\n    }\n    toggleArrangeModal() {\n        this.setState({ isArrangeModalOpen: !this.state.isArrangeModalOpen });\n    }\n    resetPlayers() {\n        setPlayers();\n        this.setState({ Players: getPlayers() });\n    }\n    addNewPlayer() {\n        try {\n            if (!this.state.playerName) throw new Error(\"Bhadwe\");\n            const player = {\n                ID: Math.random().toFixed(4) * 10000,\n                Name: this.state.playerName,\n                IsMF: true,\n                Profile: this.state.playerLogo,\n                CurrentRoundScore: 0,\n                TotalScore: 0,\n                Scores: [],\n                ColorCode: \"#424242\",\n                IsCustom: true\n            };\n            const allPlayers = this.state.Players;\n            allPlayers.push(player);\n            setPlayers(allPlayers);\n            this.setState({ isCreateModalOpen: false, playerName: \"\", playerLogo: \"\", Players: allPlayers });\n        } catch (error) {\n            console.error(error);\n            alert(error)\n        }\n    }\n\n    deletePlayer(ID) {\n        const allPlayers = this.state.Players;\n        const index = allPlayers.findIndex((player) => player.ID === ID);\n        allPlayers.splice(index, 1);\n        setPlayers(allPlayers);\n        this.setState({ Players: allPlayers });\n    }\n\n\n\n    render() {\n        return (\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"stretch\">\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            Home\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <Grid xs={10}>\n                    <Paper elevation={3}>\n                        <Card>\n                            <CardContent>\n                                <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Select players</Typography>\n                                <FormControl required component=\"fieldset\">\n                                    <FormGroup>\n                                        {this.state.Players.map((player, index) =>\n                                            <FormControlLabel\n                                                control={<Checkbox checked={player.IsPlaying} value={player.Name} id={index} onChange={(e) => {\n                                                    let CurrentPlayers = this.state.Players;\n                                                    CurrentPlayers[e.target.id].IsPlaying = e.target.checked;\n                                                    this.setState({ Players: CurrentPlayers })\n                                                }} />}\n                                                label={<ListItem button>\n                                                    <ListItemAvatar>\n                                                        <Avatar src={player.Profile} />\n                                                    </ListItemAvatar>\n                                                    <ListItemText primary={player.Name} />\n\n                                                    {player.IsCustom && <IconButton onClick={() => { this.deletePlayer(player.ID) }}><Delete /></IconButton>}\n                                                </ListItem>}\n                                            />\n                                        )}\n                                    </FormGroup>\n                                    <FormHelperText error={this.state.hasError}>{this.state.errorInfo}</FormHelperText>\n                                </FormControl>\n                            </CardContent>\n                            <CardActions>\n                                <Button variant=\"contained\" color=\"primary\" onClick={this.startGame}>\n                                    Start Game\n                                </Button>\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => { this.setState({ isCreateModalOpen: true }) }}>\n                                    Add player\n                                </Button>\n                                <Button variant=\"contained\" color=\"secondary\" onClick={this.resetPlayers}>\n                                    Reset\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Paper>\n                </Grid>\n                <Dialog open={this.state.isArrangeModalOpen} onClose={this.toggleArrangeModal}>\n                    <DialogContent>\n                        <DialogContentText>\n                            Arrange players\n                        </DialogContentText>\n                        <List>\n                            {this.state.GamePlayers.map((player, index) =>\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar src={player.Profile} />\n                                    </ListItemAvatar>\n                                    <ListItemText primary={player.Name} />\n\n                                    <IconButton onClick={() => {\n                                        let players = this.state.GamePlayers;\n                                        [players[index], players[index - 1]] = [players[index - 1], players[index]];\n                                        this.setState({ GamePlayers: players });\n                                    }} hidden={index === 0}><KeyboardArrowUp /></IconButton>\n                                    <IconButton onClick={() => {\n                                        let players = this.state.GamePlayers;\n                                        [players[index], players[index + 1]] = [players[index + 1], players[index]];\n                                        this.setState({ GamePlayers: players });\n                                    }} hidden={index === this.state.GamePlayers.length - 1}><KeyboardArrowDown /></IconButton>\n                                </ListItem>\n                            )}\n                        </List>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" color=\"secondary\" onClick={this.toggleArrangeModal}>Cancel</Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.startSortedGame}>Start</Button>\n                    </DialogActions>\n                </Dialog>\n                <Dialog open={this.state.isCreateModalOpen} onClose={this.toggleAddPlayer}>\n                    <DialogContent>\n                        <DialogContentText>\n                            Add Player\n                        </DialogContentText>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Name\"\n                            type=\"text\"\n                            fullWidth\n                            variant=\"standard\"\n                            required\n                            onChange={(e) => { this.setState({ playerName: e.target.value }) }}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"profile\"\n                            label=\"Logo URL(Optional)\"\n                            type=\"text\"\n                            fullWidth\n                            variant=\"standard\"\n                            onChange={(e) => { this.setState({ playerLogo: e.target.value }) }}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.toggleAddPlayer}>Cancel</Button>\n                        <Button onClick={this.addNewPlayer}>Add</Button>\n                    </DialogActions>\n                </Dialog>\n            </Grid>\n\n\n        )\n    }\n}\nexport default withRouter(GamesHome);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { FormControl, InputLabel, Select, MenuItem, Checkbox, FormControlLabel, FormLabel, FormGroup, Grid, Slider } from '@material-ui/core';\nimport { Input, Dialog, DialogTitle, DialogContent, DialogActions, FormHelperText } from '@material-ui/core';\n\nclass StepperForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeStep: 0,\n            players: this.props.players,\n            IsPlaying: this.props.RoundInProgress,\n            hasError: false,\n            errorInfo: null,\n            TotalHands: 0,\n            MAX_HANDS: Math.ceil(52 / this.props.players.length) || 10\n        }\n        this.handleBeforeRoundSubmit = this.handleBeforeRoundSubmit.bind(this);\n        this.handleAfterRoundSubmit = this.handleAfterRoundSubmit.bind(this);\n    }\n    handleBeforeRoundSubmit() {\n        try {\n            let players = this.state.players;\n            let flag = true;\n            let TotalHands = 0;\n            for (let player of players) {\n                if (this.state.hasOwnProperty(player.ID)) {\n                    player.CurrentRoundScore = parseInt(this.state[player.ID])\n                    TotalHands += this.state[player.ID]\n                } else {\n                    flag = false\n                    break\n                }\n            }\n            if (flag && parseInt(52 / this.state.players.length) !== parseInt(TotalHands)) {\n                this.props.handleScoreUpload(this.state);\n            } else {\n                this.setState({ hasError: true, errorInfo: \"Invalid hands:\" + TotalHands.toString(), activeStep: 0 })\n            }\n        } catch (e) {\n            this.setState({ hasError: true, errorInfo: \"Bhakk\" })\n        }\n    }\n\n    handleAfterRoundSubmit() {\n        let Players = this.state.players;\n        let flag = true;\n        for (let Player of Players) {\n            if (!this.state[Player.ID]) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            this.setState({ hasError: true, errorInfo: \"Bhakk\" })\n        } else {\n            // Players.forEach(Player => Player.CurrentRoundScore = this.state[Player.ID] ? 10 + parseInt(Player.CurrentRoundScore): 0)\n            // console.log(this.state)\n            // console.log(Players)\n            this.props.handleScoreUpload(this.state);\n        }\n    }\n    componentDidMount() {\n        if (this.state.IsPlaying) {\n            this.state.players.forEach(player => this.setState({ [player.ID]: true }))\n        }\n    }\n    generateMarks() {\n        let marks = [];\n        for (let index = 0; index <= this.state.MAX_HANDS; index++) {\n            marks.push({\n                value: index,\n                label: index,\n            })\n        }\n        return marks;\n    }\n\n    render() {\n        if (this.state.IsPlaying) {\n            return (<Dialog open={true}>\n                <DialogTitle>Results for Round: <strong>{this.props.currentRounds + 1}</strong> </DialogTitle>\n                <DialogContent>\n                    <form>\n                        <FormControl required component=\"fieldset\">\n                            <FormLabel component=\"legend\">Unselect failures</FormLabel>\n                            <FormGroup>\n                                {this.state.players.map((player, index) =>\n                                    <FormControlLabel\n                                        control={<Checkbox checked={this.state[player.ID]} onChange={(e) => this.setState({ [e.target.value]: !this.state[e.target.value] })} value={player.ID} />}\n                                        label={player.Name}\n                                    />\n                                )}\n                            </FormGroup>\n                            <FormHelperText error={this.state.hasError}>{this.state.errorInfo}</FormHelperText>\n                        </FormControl>\n                    </form>\n                </DialogContent>\n                <DialogActions>\n                    <div>\n                        <div>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleAfterRoundSubmit}>\n                                Submit\n                            </Button>\n                            <Button\n                                variant=\"container\" color=\"secondary\"\n                                onClick={this.props.handleBack}\n                            >\n                                Back\n                            </Button>\n\n                        </div>\n                    </div>\n                </DialogActions>\n            </Dialog>)\n        }\n        return (<Dialog disableBackdropClick disableEscapeKeyDown open={true} fullWidth={true}>\n            <DialogTitle>Total Hands: <strong>{this.state.TotalHands}</strong> </DialogTitle>\n            <DialogContent>\n\n                <FormControl required component=\"fieldset\" fullWidth>\n                    {/* <FormGroup> */}\n                    <Grid container direction='row' justifyContent='space-between'>\n                        {this.state.players.map((Player, index) =>\n                            <>\n                                <Grid xs={3}>\n                                    <FormControl required>\n                                        <InputLabel>{Player.Name}</InputLabel>\n                                        <Select\n                                            id={Player.ID}\n                                            name={Player.ID}\n                                            onChange={(e) => {\n                                                let players = this.state.players;\n                                                let TotalHands = e.target.value;\n                                                for (let player of players) {\n                                                    if (this.state.hasOwnProperty(player.ID)) {\n                                                        if (!(e.target.name === player.ID)) {\n                                                            TotalHands += this.state[player.ID]\n                                                        }\n                                                    }\n                                                }\n                                                this.setState({ [Player.ID]: e.target.value, TotalHands: TotalHands })\n                                            }}\n                                            value={Number(this.state[Player.ID]) || \"\"}\n                                            input={<Input id={Player.ID} />}\n                                            style={{ minWidth: '150px' }}>\n                                            <MenuItem value={0}>0</MenuItem>\n                                            <MenuItem value={1}>1</MenuItem>\n                                            <MenuItem value={2}>2</MenuItem>\n                                            <MenuItem value={3}>3</MenuItem>\n                                            <MenuItem value={4}>4</MenuItem>\n                                            <MenuItem value={5}>5</MenuItem>\n                                            <MenuItem value={6}>6</MenuItem>\n                                            <MenuItem value={7}>7</MenuItem>\n                                            <MenuItem value={8}>8</MenuItem>\n                                            <MenuItem value={9}>9</MenuItem>\n                                            <MenuItem value={10}>10</MenuItem>\n                                        </Select>\n                                    </FormControl></Grid>\n                                <Grid xs={8}>\n                                    <Slider name={Player.ID} min={0} value={Number(this.state[Player.ID])} step={1} marks={this.generateMarks()}\n                                        max={this.state.MAX_HANDS}\n                                        onChange={(e, value) => {\n                                            let players = this.state.players;\n                                            let TotalHands = value;\n                                            for (let player of players) {\n                                                if (this.state.hasOwnProperty(player.ID)) {\n                                                    if (!(Player.ID === player.ID)) {\n                                                        TotalHands += this.state[player.ID]\n                                                    }\n                                                }\n                                            }\n                                            this.setState({ [Player.ID]: value, TotalHands: TotalHands })\n                                        }}\n                                    ></Slider>\n                                </Grid>\n\n                            </>\n                        )}\n                    </Grid>\n                    {/* </FormGroup> */}\n                    <FormHelperText error={this.state.hasError}>{this.state.errorInfo}</FormHelperText>\n                </FormControl>\n\n            </DialogContent>\n            <DialogActions>\n                <div>\n                    <div>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleBeforeRoundSubmit}>\n                            Submit\n                        </Button>\n                        <Button\n                            variant=\"container\" color=\"secondary\"\n                            onClick={this.props.handleBack}\n                        >\n                            Back\n                        </Button>\n                    </div>\n                </div>\n            </DialogActions>\n        </Dialog>)\n    }\n}\n\n\nexport default StepperForm;","import * as React from 'react';\nimport {\n  Chart,\n  BarSeries,\n  ArgumentAxis,\n  ValueAxis,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Animation } from '@devexpress/dx-react-chart';\n\n\nexport default class ScoreGraph extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: this.props.scores\n    };\n  }\n  componentDidMount(){\n  }\n  render() {\n\n    // if(this.props.RoundInProgress){\n    const { data: chartData } = this.state;\n    if(chartData.length > 0){\n      return(<Chart\n        data={chartData}\n      >\n        <ArgumentAxis />\n        <ValueAxis max={140} />\n               <BarSeries \n        valueField=\"TotalScore\"\n        argumentField=\"Name\"\n        color=\"#3f51b5\"\n        />\n        <Animation />\n      </Chart>)\n    }\n    // }\n    return(null);\n\n  }\n}","import uuidv from 'uuid';\n\nimport { getCookie, setCookie } from './cookie-helper'\nvar GameHelper = {\n  initGame: (Config) => {\n    let GameId = uuidv.v4();\n    setCookie(GameId, Config, 1);\n    return GameId;\n  },\n  GetGameById: (Id) => {\n    return getCookie(Id);\n  },\n  toHHMMSS: () => {\n    var sec_num = parseInt(this, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n    return hours + ':' + minutes + ':' + seconds;\n  }\n}\nexport function toHHMMSS() {\n  var sec_num = parseInt(this, 10); // don't forget the second param\n  var hours = Math.floor(sec_num / 3600);\n  var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n  var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n  if (hours < 10) { hours = \"0\" + hours; }\n  if (minutes < 10) { minutes = \"0\" + minutes; }\n  if (seconds < 10) { seconds = \"0\" + seconds; }\n  return hours + ':' + minutes + ':' + seconds;\n}\n\nexport default GameHelper;","import React from 'react';\nimport { Grid, Typography, Container, AppBar, Toolbar, Avatar, Paper, FormControl } from '@material-ui/core';\nimport { ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction, Switch, Badge, Select, Input, MenuItem } from '@material-ui/core';\nimport MUIDataTable from \"mui-datatables\";\nimport HorizontalLabelPositionBelowStepper from '../Components/StepperForm'\nimport { setValue, getValue } from '../data-access-layer/storage-helper'\nimport { withRouter } from \"react-router-dom\";\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite';\nimport ScoreGraph from '../Components/ScoreGraph'\nimport { toHHMMSS } from '../data-access-layer/game-helper';\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        let URLPath = this.props.location.pathname.split(\"/\");\n        this.state = {\n            GameId: URLPath[URLPath.length - 1],\n            GameStarted: false,\n            RoundInProgress: false,\n            openPlayerHandler: false,\n            Players: [],\n            currentRounds: 0,\n            table_headers: [],\n            table_data: [],\n            chart_data: [],\n            leaderboard: [],\n            seconds: 0\n        }\n        this.updateScorecard = this.updateScorecard.bind(this);\n    }\n    tick() {\n        this.setState(state => ({\n            seconds: state.seconds + 1\n        }));\n    }\n    componentDidMount() {\n        try {\n            this.interval = setInterval(() => this.tick(), 1000);\n            let Config = getValue(this.state.GameId)\n            if (Config) {\n                Object.keys(Config).map(key => {\n                    this.setState({ [key]: Config[key] });\n                    return false;\n                })\n            }\n        } catch (error) {\n            this.props.history.push('/')\n        }\n    }\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n    updateScorecard(data) {\n        let CurrentPlayers = this.state.Players;\n        if (this.state.RoundInProgress) {\n            const rotatedElement = CurrentPlayers.shift(); // Remove the first element\n            CurrentPlayers.push(rotatedElement); // Add the removed element to the end\n            let headers = [\"#\"];\n            let table_data = [];\n            let chart_data = [];\n            CurrentPlayers.map((Player, index) => {\n                Player.CurrentRoundScore = data[Player.ID] ? Player.CurrentRoundScore += 10 : 0;\n                Player.Scores.push(Player.CurrentRoundScore)\n                Player.TotalScore += Player.CurrentRoundScore\n                Player.CurrentRoundScore = 0;\n                chart_data.push({\n                    \"Name\": Player.Name,\n                    \"TotalScore\": Player.TotalScore,\n                })\n                headers.push(Player.Name)\n                return false;\n            })\n            for (let i = CurrentPlayers[0].Scores.length - 1; i >= 0; i--) {\n                let table_row = []\n                table_row.push(i + 1)\n                for (let j = 0; j < CurrentPlayers.length; j++) {\n                    table_row.push(CurrentPlayers[j].Scores[i])\n                }\n                table_data.push(table_row);\n            }\n            let Leaderboard = [...CurrentPlayers].sort((Player1, Player2) => {\n                return Player2.TotalScore - Player1.TotalScore\n            })\n            let state = { Players: CurrentPlayers, table_headers: headers, table_data: table_data, chart_data: chart_data, currentRounds: this.state.currentRounds + 1, RoundInProgress: false, openPlayerHandler: false, leaderboard: Leaderboard, seconds: this.state.seconds }\n            this.setState(state);\n            setValue(this.state.GameId, state);\n        } else {\n            let TotalRoundScore = 0;\n            CurrentPlayers.map((Player, index) => {\n                Player.CurrentRoundScore = data[Player.ID]\n                TotalRoundScore += data[Player.ID]\n                return false;\n            })\n            this.setState({ Players: CurrentPlayers, RoundInProgress: true, openPlayerHandler: false, TotalRoundScore: TotalRoundScore });\n        }\n    }\n\n    \n    render() {\n        return (<Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n        >\n            {this.state.openPlayerHandler ? <HorizontalLabelPositionBelowStepper handleScoreUpload={this.updateScorecard} players={this.state.Players} RoundInProgress={this.state.RoundInProgress} handleBack={() => this.setState({ openPlayerHandler: false })} currentRounds={this.state.currentRounds} /> : null}\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Container>\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography variant=\"h5\">\n                                Judgement\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                {toHHMMSS(this.state.seconds.toString())}\n                            </Typography>\n                        </Grid>\n                    </Container>\n                </Toolbar>\n                <BottomNavigation\n                    value={\"Recents\"}\n                    onChange={(event, newValue) => {\n                        // setValue(newValue);\n                    }}\n                    showLabels\n                >\n                    <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} />\n                    {this.state.currentRounds > 0 ? <BottomNavigationAction label=\"End game\" icon={<AppsIcon />} onClick={() => this.setState({ GameStarted: false })} /> : <BottomNavigationAction label=\"Start games\" icon={<PlayCircleFilledWhiteIcon />} onClick={() => this.setState({ openPlayerHandler: true })} />}\n\n                    <BottomNavigationAction icon={<Typography component=\"div\">\n                        <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n                            <Grid item>End</Grid>\n                            <Grid item>\n                                <Switch\n                                    checked={this.state.RoundInProgress ? true : false}\n                                    onChange={() => this.setState({ openPlayerHandler: true })}\n                                    value=\"Start\"\n                                />\n                            </Grid>\n                            <Grid item>Start</Grid>\n                        </Grid>\n                    </Typography>} />\n\n                </BottomNavigation>\n\n            </AppBar>\n\n            <Grid\n                container\n                direction=\"row\"\n            >\n                <Grid item xs={12} sm={8}>\n                    {this.state.RoundInProgress ?\n                        // <Container maxWidth=\"lg\" style={{minHeight: '100%'}}>\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"space-evenly\"\n                            alignItems=\"stretch\"\n                            style={{ minHeight: '100%' }}\n                        >\n                            <Grid container\n                                direction=\"row\"\n                                justify=\"space-evenly\"\n                                alignItems=\"center\"\n                            >\n                                {/* Chart */}\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n\n\n                                        <ListItem alignItems=\"flex-start\">\n                                            <ListItemAvatar>\n                                                <Avatar variant=\"square\" style={this.state.trump_color ? { backgroundColor: this.state.trump_color } : {}}>{this.state.TotalRoundScore}</Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={\"Hands total\"}\n                                                secondary={\n                                                    <React.Fragment>\n                                                        <Typography\n                                                            component=\"span\"\n                                                            variant=\"body2\"\n                                                            color=\"text secondary\"\n                                                        >\n                                                            for round {this.state.currentRounds + 1}\n                                                        </Typography>\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                        </ListItem>\n                                    </Paper>\n                                </Grid>\n\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n                                        <ListItem alignItems=\"flex-start\">\n                                            {this.state.Players.map(Player =>\n                                                <ListItemAvatar>\n                                                    <Badge\n                                                        overlap=\"circle\"\n                                                        anchorOrigin={{\n                                                            vertical: 'bottom',\n                                                            horizontal: 'right',\n                                                        }}\n                                                        badgeContent={<Avatar style={{ height: '22px', width: '22px', backgroundColor: Player.ColorCode }} >{Player.CurrentRoundScore}</Avatar>}\n                                                    >\n\n                                                        <Avatar alt={Player.Name} src={Player.Profile} style={{ height: '40px', width: '40px' }} />\n                                                    </Badge>                                    </ListItemAvatar>)}\n                                        </ListItem>\n\n                                    </Paper>\n                                </Grid>\n\n                            </Grid>\n                            <Grid container\n                                direction=\"row\"\n                                justify=\"space-evenly\"\n                                alignItems=\"center\">\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n                                        <ListItem alignItems=\"flex-start\">\n                                            <ListItemAvatar>\n                                                <Avatar style={{ backgroundColor: '#ff5722' }}>{this.state.currentRounds + 1}</Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={\"Round\"}\n                                                secondary={\n                                                    <React.Fragment>\n                                                        <Typography\n                                                            component=\"span\"\n                                                            variant=\"body2\"\n                                                            color=\"text secondary\"\n                                                        >\n                                                            in progress\n                                                        </Typography>\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                        </ListItem>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n\n                                        <ListItem alignItems=\"flex-start\">\n                                            <ListItemAvatar>\n                                                <Avatar variant=\"square\" style={this.state.trump_color ? { backgroundColor: this.state.trump_color } : {}}>T</Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary=\"Trump\"\n                                                secondary={\n                                                    <React.Fragment>\n                                                        <FormControl>\n                                                            <Select\n                                                                onChange={(e) => this.setState({ trump_color: e.target.value })}\n                                                                input={<Input />}\n                                                                style={{ minWidth: '120px' }}\n                                                            >\n                                                                <MenuItem value=\"black\">हुकुम</MenuItem>\n                                                                <MenuItem value=\"red\">पान</MenuItem>\n                                                                <MenuItem value=\"black\">चिडी</MenuItem>\n                                                                <MenuItem value=\"red\">ईंट</MenuItem>\n                                                            </Select>\n                                                        </FormControl>\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                        </ListItem>\n                                    </Paper>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        // </Container>\n                        : <ScoreGraph scores={this.state.chart_data} />}\n                </Grid>\n                <Grid item xs={12} sm={4} container direction=\"column\"\n                    justify=\"space-evenly\"\n                    alignItems=\"stretch\">\n                    {/* <List> */}\n                    {this.state.leaderboard.map(Player =>\n                        <ListItem key={Player.Name}>\n                            <ListItemAvatar>\n                                <Avatar src={Player.Profile} />\n                            </ListItemAvatar>\n                            <ListItemText primary={Player.Name} />\n                            <ListItemSecondaryAction>\n                                <ListItemAvatar>\n                                    <Avatar style={{ backgroundColor: Player.ColorCode }}>{Player.TotalScore}</Avatar>\n                                </ListItemAvatar>\n                            </ListItemSecondaryAction>\n                        </ListItem>)}\n                    {/* </List> */}\n                </Grid>\n            </Grid>\n\n\n            {this.state.currentRounds > 0 ? <Container maxWidth={false}>\n                <MUIDataTable\n                    title={<Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n                        Scorecard\n                    </Typography>}\n                    data={this.state.table_data}\n                    columns={this.state.table_headers}\n                    options={{\n                        filterType: 'checkbox',\n                        rowsPerPage: 20,\n                        fixedHeader: true,\n                        selectableRows: false,\n                        selectableRowsHeader: false,\n                        sort: false\n                    }}\n                />\n            </Container> : null}\n        </Grid>)\n\n    }\n}\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { createBrowserHistory } from \"history\";\n\nimport Home from './Views/Home';\nimport Judgement from './Views/Judgement';\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n  } from \"react-router-dom\";\n\nconst hist = createBrowserHistory();\n\nReactDOM.render(<Router history={hist}>\n    <Switch>\n      {/* {routes.map((route) => (\n<Route exact key={route.Name} component={route.View} path={route.Route} />\n  ))} */}\n    <Route exact path=\"/Home\">\n      <Home/>\n    </Route>\n    <Route path=\"/Judgement\">\n      <Judgement/>\n    </Route>\n    <Route path=\"*\">\n        <Home />\n    </Route>\n  </Switch>\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}