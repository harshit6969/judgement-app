{"version":3,"sources":["constants/images/Parmar.jpg","constants/images/Maadi.jpg","constants/images/Harshit.jpg","constants/images/Shanky.jpg","constants/images/Baby.jpg","constants/images/Shivi.jpg","constants/images/Vikas.jpg","constants/images/Mudit.jpg","constants/images/Nabh.jpg","serviceWorker.js","players.js","data-access-layer/storage-helper.js","Views/Home.js","Components/StepperForm.js","Components/ScoreGraph.js","Views/Judgement.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","players","ID","Name","IsMF","Profile","Parmar","CurrentRoundScore","TotalScore","Scores","ColorCode","Shanky","Harshit","Maadi","Baby","Shivi","Mudit","Vikas","setValue","key","value","console","log","localStorage","setItem","JSON","stringify","GamesHome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Players","Game","startGame","bind","assertThisInitialized","CurrentPlayers","forEach","player","IsPlaying","setState","TotalPlayers","GamePlayers","push","GameId","uuidv","v4","history","hasError","errorInfo","_this2","react_default","a","createElement","Grid","container","direction","justify","alignItems","AppBar","position","Toolbar","Typography","variant","Container","Paper","elevation","Card","CardContent","component","color","gutterBottom","FormControl","required","FormGroup","map","index","FormControlLabel","control","Checkbox","checked","id","onChange","e","target","label","ListItem","button","ListItemAvatar","Avatar","src","ListItemText","primary","FormHelperText","error","CardActions","Button","onClick","React","Component","withRouter","StepperForm","activeStep","RoundInProgress","TotalHands","handleBeforeRoundSubmit","handleAfterRoundSubmit","flag","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","hasOwnProperty","parseInt","err","return","length","handleScoreUpload","toString","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Player","defineProperty","_this3","Dialog","open","DialogTitle","currentRounds","DialogContent","FormLabel","DialogActions","handleBack","disableBackdropClick","disableEscapeKeyDown","InputLabel","Select","name","_this3$setState2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","input","Input","style","minWidth","MenuItem","ScoreGraph","data","scores","chartData","react","dx_react_chart_material_ui_es","max","valueField","argumentField","dx_react_chart_es","App","URLPath","pathname","split","GameStarted","openPlayerHandler","table_headers","table_data","chart_data","leaderboard","seconds","updateScorecard","interval","setInterval","tick","Config","parse","getItem","keys","clearInterval","headers","i","table_row","j","Leaderboard","sort","Player1","Player2","TotalRoundScore","Components_StepperForm","toHHMMSS","BottomNavigation","event","newValue","showLabels","BottomNavigationAction","icon","Restore_default","Apps_default","PlayCircleFilledWhite_default","spacing","item","Switch","xs","sm","minHeight","md","lg","trump_color","backgroundColor","secondary","Fragment","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","height","width","alt","ScoreGraph_ScoreGraph","ListItemSecondaryAction","maxWidth","dist_default","title","columns","options","filterType","rowsPerPage","fixedHeader","selectableRows","selectableRowsHeader","String","prototype","sec_num","hours","Math","floor","minutes","hist","createBrowserHistory","ReactDOM","render","react_router_dom","react_router","exact","path","Home","Judgement","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sHCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gcCmFSC,EA3FC,CACZ,CACIC,GAAM,EACNC,KAAQ,SACRC,MAAQ,EACRC,QAAWC,IACXC,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,SACRC,MAAQ,EACRC,QAAWM,IACXJ,kBAAqB,EACrBC,WAAc,EAAUC,OAAQ,GAChCC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,UACRC,MAAQ,EACRC,QAAWO,IACXL,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,QACRC,MAAQ,EACRC,QAAWQ,IACXN,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,WACRC,MAAQ,EACRC,QAAW,GACXE,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,OACRC,MAAQ,EACRC,QAAWS,IACXP,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,QACRC,MAAQ,EACRC,QAAWU,IACXR,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,QACRC,MAAQ,EACRC,QAAWW,IACXT,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,WAEjB,CACIR,GAAM,EACNC,KAAQ,QACRC,MAAQ,EACRC,QAAWY,IACXV,kBAAqB,EACrBC,WAAc,EACdC,OAAQ,GACRC,UAAa,oBClGrB,SAASQ,EAASC,EAAKC,GACnBC,QAAQC,IAAIF,GACZG,aAAaC,QAAQL,EAAKM,KAAKC,UAAUN,0BCMvCO,eACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAASpC,EACTqC,KAAM,aAEVT,EAAKU,UAAYV,EAAKU,UAAUC,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IANFA,mFASf,IAAIa,EAAiBzC,EACrByC,EAAeC,QAAQ,SAAAC,GACnBA,EAAOC,WAAY,IAEvBb,KAAKc,SAAS,CAAC7C,QAASyC,wCAGxB,IACIK,EAAe,EACfC,EAAc,GAOlB,GATqB/C,EAGN0C,QAAQ,SAAAC,GAChBA,EAAOC,YACNE,IACAC,EAAYC,KAAKL,MAGtBG,EAAe,GAAKA,EAAe,GAAG,CACrC,IAAIG,EAASC,IAAMC,KACnBlC,EAASgC,EAAQ,CAACb,QAASW,IAC3BhB,KAAKJ,MAAMyB,QAAQJ,KAAK,IAAIjB,KAAKI,MAAME,KAAK,IAAIY,QAEhDlB,KAAKc,SAAS,CAACQ,UAAU,EAAMC,UAAW,4EAGzC,IAAAC,EAAAxB,KAEL,OACIyB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACXP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,SAAS,UACbT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,MAApB,UAMRZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,UAAW,GACdf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACIhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYO,UAAU,KAAKN,QAAQ,KAAKO,MAAM,UAAUC,cAAY,GAApE,kBACApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,UAAQ,EAACJ,UAAU,YAC5BlB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACKhD,KAAKI,MAAMC,QAAQ4C,IAAI,SAACrC,EAAQsC,GAAT,OACpBzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACIC,QAAS3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUC,QAAS1C,EAAOC,UAAWzB,MAAOwB,EAAOzC,KAAMoF,GAAIL,EAAOM,SAAU,SAACC,GACpF,IAAI/C,EAAiBc,EAAKpB,MAAMC,QAChCK,EAAe+C,EAAEC,OAAOH,IAAI1C,UAAY4C,EAAEC,OAAOJ,QACjD9B,EAAKV,SAAS,CAAE7C,QAASyC,OAE7BiD,MAAOlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUC,QAAM,GACnBpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQC,IAAKpD,EAAOvC,WAExBoD,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAcC,QAAStD,EAAOzC,aAK9CsD,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAgBC,MAAOpE,KAAKI,MAAMkB,UAAWtB,KAAKI,MAAMmB,aAGhEE,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACI5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQjC,QAAQ,YAAYO,MAAM,UAAU2B,QAASvE,KAAKO,WAA1D,0BA7ERiE,IAAMC,WA0FfC,eAAW/E,0JCwEXgF,eArKX,SAAAA,EAAY/E,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2E,IACf9E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6E,GAAAxE,KAAAH,KAAMJ,KACDQ,MAAQ,CACTwE,WAAY,EACZ3G,QAAS4B,EAAKD,MAAM3B,QACpB4C,UAAWhB,EAAKD,MAAMiF,gBACtBvD,UAAU,EACVC,UAAW,KACXuD,WAAW,GAEfjF,EAAKkF,wBAA0BlF,EAAKkF,wBAAwBvE,KAA7BV,OAAAW,EAAA,EAAAX,CAAAD,IAC/BA,EAAKmF,uBAAyBnF,EAAKmF,uBAAuBxE,KAA5BV,OAAAW,EAAA,EAAAX,CAAAD,IAXfA,yFAcf,IACA,IAAI5B,EAAU+B,KAAKI,MAAMnC,QACrBgH,GAAO,EACPH,EAAa,EAHdI,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAIH,QAAAC,EAAAC,EAAkBtH,EAAlBuH,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA0B,KAAlBtE,EAAkB0E,EAAAlG,MACtB,IAAGY,KAAKI,MAAMwF,eAAehF,EAAO1C,IAG/B,CACD+G,GAAO,EACP,MAJArE,EAAOrC,kBAAoBsH,SAAS7F,KAAKI,MAAMQ,EAAO1C,KACtD4G,GAAY9E,KAAKI,MAAMQ,EAAO1C,KAPnC,MAAA4H,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAaAH,GAAQY,SAAS,GAAK7F,KAAKI,MAAMnC,QAAQ+H,SAAWH,SAASf,GAC5D9E,KAAKJ,MAAMqG,kBAAkBjG,KAAKI,OAElCJ,KAAKc,SAAS,CAACQ,UAAU,EAAMC,UAAW,iBAAmBuD,EAAWoB,WAAYtB,WAAW,IAEtG,MAAMnB,GACHzD,KAAKc,SAAS,CAACQ,UAAU,EAAMC,UAAW,4DAK1C,IAAIlB,EAAUL,KAAKI,MAAMnC,QACrBgH,GAAO,EAFSkB,GAAA,EAAAC,GAAA,EAAAC,OAAAhB,EAAA,IAGpB,QAAAiB,EAAAC,EAAkBlG,EAAlBmF,OAAAC,cAAAU,GAAAG,EAAAC,EAAAb,QAAAC,MAAAQ,GAAA,EAA0B,KAAlBK,EAAkBF,EAAAlH,MACtB,IAAIY,KAAKI,MAAMoG,EAAOtI,IAAI,CACtB+G,GAAO,EACP,QANY,MAAAa,GAAAM,GAAA,EAAAC,EAAAP,EAAA,YAAAK,GAAA,MAAAI,EAAAR,QAAAQ,EAAAR,SAAA,WAAAK,EAAA,MAAAC,GASjBpB,EACCjF,KAAKc,SAAS,CAACQ,UAAU,EAAMC,UAAW,UAK1CvB,KAAKJ,MAAMqG,kBAAkBjG,KAAKI,mDAGvB,IAAAoB,EAAAxB,KACZA,KAAKI,MAAMS,WACVb,KAAKI,MAAMnC,QAAQ0C,QAAQ,SAAAC,GAAM,OAAIY,EAAKV,SAALhB,OAAA2G,GAAA,EAAA3G,CAAA,GAAgBc,EAAO1C,IAAK,uCAGhE,IAAAwI,EAAA1G,KACL,OAAGA,KAAKI,MAAMS,UACHY,EAAAC,EAAAC,cAACgF,GAAA,EAAD,CAAQC,MAAM,GACjBnF,EAAAC,EAAAC,cAACkF,GAAA,EAAD,2BAAgCpF,EAAAC,EAAAC,cAAA,cAAS3B,KAAKJ,MAAMkH,cAAgB,GAApE,KACArF,EAAAC,EAAAC,cAACoF,GAAA,EAAD,KACItF,EAAAC,EAAAC,cAAA,YACZF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,UAAQ,EAACJ,UAAU,YAChClB,EAAAC,EAAAC,cAACqF,GAAA,EAAD,CAAWrE,UAAU,UAArB,qBACAlB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACKhD,KAAKI,MAAMnC,QAAQgF,IAAI,SAACrC,EAAQsC,GAAT,OAC1BzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACAC,QAAS3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUC,QAASoD,EAAKtG,MAAMQ,EAAO1C,IAAKsF,SAAU,SAACC,GAAD,OAAOiD,EAAK5F,SAALhB,OAAA2G,GAAA,EAAA3G,CAAA,GAAgB2D,EAAEC,OAAOtE,OAASsH,EAAKtG,MAAMqD,EAAEC,OAAOtE,UAAUA,MAAOwB,EAAO1C,KAClJyF,MAAO/C,EAAOzC,UAIhBsD,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAgBC,MAAOpE,KAAKI,MAAMkB,UAAWtB,KAAKI,MAAMmB,cAIhDE,EAAAC,EAAAC,cAACsF,GAAA,EAAD,KACIxF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQjC,QAAQ,YAAYO,MAAM,UAAU2B,QAASvE,KAAKgF,wBAA1D,UAGIvD,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CACAjC,QAAQ,YAAYO,MAAM,YAC1B2B,QAASvE,KAAKJ,MAAMsH,YAFpB,YAYZzF,EAAAC,EAAAC,cAACgF,GAAA,EAAD,CAAQQ,sBAAoB,EAACC,sBAAoB,EAACR,MAAM,GAC5DnF,EAAAC,EAAAC,cAACkF,GAAA,EAAD,yBAA8BpF,EAAAC,EAAAC,cAAA,cAAS3B,KAAKJ,MAAMkH,cAAgB,GAAlE,KACArF,EAAAC,EAAAC,cAACoF,GAAA,EAAD,KAEItF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAACqF,GAAA,EAAD,CAAWrE,UAAU,UAArB,gBAA4C3C,KAAKI,MAAM0E,YAEvDrD,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,UAAQ,EAACJ,UAAU,YACxClB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACKhD,KAAKI,MAAMnC,QAAQgF,IAAI,SAACuD,EAAQtD,GAAT,OACxBzB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,UAAQ,GAC7BtB,EAAAC,EAAAC,cAAC0F,GAAA,EAAD,KAAab,EAAOrI,MACZsD,EAAAC,EAAAC,cAAC2F,GAAA,EAAD,CACA/D,GAAIiD,EAAOtI,GACXqJ,KAAMf,EAAOtI,GACbsF,SAAU,SAACC,GAAK,IAAA+D,EACRvJ,EAAUyI,EAAKtG,MAAMnC,QACrB6G,EAAarB,EAAEC,OAAOtE,MAFdqI,GAAA,EAAAC,GAAA,EAAAC,OAAAtC,EAAA,IAGZ,QAAAuC,EAAAC,EAAkB5J,EAAlBuH,OAAAC,cAAAgC,GAAAG,EAAAC,EAAAnC,QAAAC,MAAA8B,GAAA,EAA0B,KAAlB7G,EAAkBgH,EAAAxI,MACnBsH,EAAKtG,MAAMwF,eAAehF,EAAO1C,KAC3BuF,EAAEC,OAAO6D,MAAQ3G,EAAO1C,KACzB4G,GAAY4B,EAAKtG,MAAMQ,EAAO1C,MAN9B,MAAA4H,GAAA4B,GAAA,EAAAC,EAAA7B,EAAA,YAAA2B,GAAA,MAAAI,EAAA9B,QAAA8B,EAAA9B,SAAA,WAAA2B,EAAA,MAAAC,GAUZjB,EAAK5F,UAAL0G,EAAA,GAAA1H,OAAA2G,GAAA,EAAA3G,CAAA0H,EAAgBhB,EAAOtI,GAAKuF,EAAEC,OAAOtE,OAArCU,OAAA2G,GAAA,EAAA3G,CAAA0H,EAAA,aAAwD1C,GAAxD0C,KAEApI,MAAOsH,EAAKtG,MAAMoG,EAAOtI,IACzB4J,MAAOrG,EAAAC,EAAAC,cAACoG,GAAA,EAAD,CAAOxE,GAAIiD,EAAOtI,KACzB8J,MAAO,CAAEC,SAAU,UACnBxG,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,KACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,KACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,KACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,KACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,KACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,KACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,KACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAO,GAAjB,UAKRqC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAgBC,MAAOpE,KAAKI,MAAMkB,UAAWtB,KAAKI,MAAMmB,cAKpDE,EAAAC,EAAAC,cAACsF,GAAA,EAAD,KACIxF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQjC,QAAQ,YAAYO,MAAM,UAAU2B,QAASvE,KAAK+E,yBAA1D,UAGQtD,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CACAjC,QAAQ,YAAYO,MAAM,YAC1B2B,QAASvE,KAAKJ,MAAMsH,YAFpB,mBAxJF1C,IAAMC,iHCMX0D,eACnB,SAAAA,EAAYvI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmI,IACjBtI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqI,GAAAhI,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXgI,KAAMvI,EAAKD,MAAMyI,QAJFxI,qHASV,IAGOyI,EAActI,KAAKI,MAAzBgI,KACR,OAAGE,EAAUtC,OAAS,EACbuC,EAAA,cAACC,GAAA,EAAD,CACLJ,KAAME,GAENC,EAAA,cAACC,GAAA,EAAD,MACAD,EAAA,cAACC,GAAA,EAAD,CAAWC,IAAK,MACTF,EAAA,cAACC,GAAA,EAAD,CACPE,WAAW,aACXC,cAAc,OACd/F,MAAM,YAEN2F,EAAA,cAACK,GAAA,EAAD,OAIG,YA7B6BpE,iBCOlCqE,eACF,SAAAA,EAAYjJ,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6I,GAEf,IAAIC,GADJjJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+I,GAAA1I,KAAAH,KAAMJ,KACaA,MAAM9B,SAASiL,SAASC,MAAM,KAFlC,OAGfnJ,EAAKO,MAAQ,CACTc,OAAQ4H,EAAQA,EAAQ9C,OAAS,GACjCiD,aAAa,EACbpE,iBAAiB,EACjBqE,mBAAmB,EACnB7I,QAAS,GACTyG,cAAe,EACfqC,cAAe,GACfC,WAAY,GACZC,WAAY,GACZC,YAAa,GACbC,QAAS,GAEb1J,EAAK2J,gBAAkB3J,EAAK2J,gBAAgBhJ,KAArBV,OAAAW,EAAA,EAAAX,CAAAD,IAhBRA,sEAmBfG,KAAKc,SAAS,SAAAV,GAAK,MAAK,CACpBmJ,QAASnJ,EAAMmJ,QAAU,iDAGb,IJpCNpK,EIoCMqC,EAAAxB,KAChB,IACIA,KAAKyJ,SAAWC,YAAY,kBAAMlI,EAAKmI,QAAQ,KAC/C,IAAIC,GJvCEzK,EIuCgBa,KAAKI,MAAMc,OJtClCzB,KAAKoK,MAAMtK,aAAauK,QAAQ3K,KIuC3ByK,GACA9J,OAAOiK,KAAKH,GAAQ3G,IAAI,SAAA9D,GACpBqC,EAAKV,SAALhB,OAAA2G,GAAA,EAAA3G,CAAA,GAAiBX,EAAMyK,EAAOzK,OAGxC,MAAOiF,GACLpE,KAAKJ,MAAMyB,QAAQJ,KAAK,qDAI5B+I,cAAchK,KAAKyJ,kDAEPrB,GACZ,IAAI1H,EAAiBV,KAAKI,MAAMC,QAChC,GAAIL,KAAKI,MAAMyE,gBAAiB,CAC5B,IAAIoF,EAAU,CAAC,KACXb,EAAa,GACbC,EAAa,GACjB3I,EAAeuC,IAAI,SAACuD,EAAQtD,GACxBsD,EAAOjI,kBAAoB6J,EAAK5B,EAAOtI,IAAMsI,EAAOjI,mBAAqB,GAAK,EAC9EiI,EAAO/H,OAAOwC,KAAKuF,EAAOjI,mBAC1BiI,EAAOhI,YAAcgI,EAAOjI,kBAC5BiI,EAAOjI,kBAAoB,EAC3B8K,EAAWpI,KAAK,CACZ9C,KAAQqI,EAAOrI,KACfK,WAAcgI,EAAOhI,aAEzByL,EAAQhJ,KAAKuF,EAAOrI,QAExB,IAAK,IAAI+L,EAAIxJ,EAAe,GAAGjC,OAAOuH,OAAS,EAAGkE,GAAK,EAAGA,IAAK,CAC3D,IAAIC,EAAY,GAChBA,EAAUlJ,KAAKiJ,EAAI,GACnB,IAAK,IAAIE,EAAI,EAAGA,EAAI1J,EAAesF,OAAQoE,IACvCD,EAAUlJ,KAAKP,EAAe0J,GAAG3L,OAAOyL,IAE5Cd,EAAWnI,KAAKkJ,GAEpB,IAAIE,EAAc3J,EAAe4J,KAAK,SAACC,EAASC,GAC5C,OAAOA,EAAQhM,WAAa+L,EAAQ/L,aAEpC4B,EAAQ,CAAEC,QAASK,EAAgByI,cAAec,EAASb,WAAYA,EAAYC,WAAYA,EAAYvC,cAAe9G,KAAKI,MAAM0G,cAAgB,EAAGjC,iBAAiB,EAAOqE,mBAAmB,EAAOI,YAAae,EAAad,QAASvJ,KAAKI,MAAMmJ,SAC5PvJ,KAAKc,SAASV,GACdlB,EAASc,KAAKI,MAAMc,OAAQd,OACzB,CACH,IAAIqK,EAAkB,EACtB/J,EAAeuC,IAAI,SAACuD,EAAQtD,GACxBsD,EAAOjI,kBAAoB6J,EAAK5B,EAAOtI,IACvCuM,GAAmBrC,EAAK5B,EAAOtI,MAEnC8B,KAAKc,SAAS,CAAET,QAASK,EAAgBmE,iBAAiB,EAAMqE,mBAAmB,EAAOuB,gBAAiBA,sCAG1G,IAAA/D,EAAA1G,KACL,OAAQyB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACJC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAEVhC,KAAKI,MAAM8I,kBAAoBzH,EAAAC,EAAAC,cAAC+I,GAAD,CAAqCzE,kBAAmBjG,KAAKwJ,gBAAiBvL,QAAS+B,KAAKI,MAAMC,QAASwE,gBAAiB7E,KAAKI,MAAMyE,gBAAiBqC,WAAY,kBAAMR,EAAK5F,SAAS,CAAEoI,mBAAmB,KAAUpC,cAAe9G,KAAKI,MAAM0G,gBAAoB,KACrSrF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,SAAS,UACbT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,gBACRC,WAAW,UAEXP,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,MAApB,aAGAZ,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,QAAQ,MACfrC,KAAKI,MAAMmJ,QAAQrD,WAAWyE,eAK/ClJ,EAAAC,EAAAC,cAACiJ,GAAA,EAAD,CACIxL,MAAO,UACPoE,SAAU,SAACqH,EAAOC,KAGlBC,YAAU,GAEVtJ,EAAAC,EAAAC,cAACqJ,GAAA,EAAD,CAAwBrH,MAAM,UAAUsH,KAAMxJ,EAAAC,EAAAC,cAACuJ,GAAAxJ,EAAD,QAC7C1B,KAAKI,MAAM0G,cAAgB,EAAIrF,EAAAC,EAAAC,cAACqJ,GAAA,EAAD,CAAwBrH,MAAM,WAAWsH,KAAMxJ,EAAAC,EAAAC,cAACwJ,GAAAzJ,EAAD,MAAc6C,QAAS,kBAAMmC,EAAK5F,SAAS,CAAEmI,aAAa,OAAexH,EAAAC,EAAAC,cAACqJ,GAAA,EAAD,CAAwBrH,MAAM,aAAasH,KAAMxJ,EAAAC,EAAAC,cAACyJ,GAAA1J,EAAD,MAA+B6C,QAAS,kBAAMmC,EAAK5F,SAAS,CAAEoI,mBAAmB,OAE1RzH,EAAAC,EAAAC,cAACqJ,GAAA,EAAD,CAAwBC,KAAMxJ,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYO,UAAU,OAChDlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMe,UAAU,QAAQd,WAAS,EAACG,WAAW,SAASqJ,QAAS,GAC3D5J,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,GAAV,OACA7J,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,GACN7J,EAAAC,EAAAC,cAAC4J,GAAA,EAAD,CACIjI,UAAStD,KAAKI,MAAMyE,gBACpBrB,SAAU,kBAAMkD,EAAK5F,SAAS,CAAEoI,mBAAmB,KACnD9J,MAAM,WAGdqC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,GAAV,eAQhB7J,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,OAEVL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,EAACE,GAAI,GAAIC,GAAI,GAClBzL,KAAKI,MAAMyE,gBAERpD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAQ,eACRC,WAAW,UACXgG,MAAO,CAAE0D,UAAW,SAEpBjK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EACXC,UAAU,MACVC,QAAQ,eACRC,WAAW,UAGXP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,EAACE,GAAI,GAAIG,GAAI,EAAGC,GAAI,GAC1BnK,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,UAAW,GAGdf,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAU5B,WAAW,cACjBP,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQ1B,QAAQ,SAAS2F,MAAOhI,KAAKI,MAAMyL,YAAc,CAAEC,gBAAiB9L,KAAKI,MAAMyL,aAAgB,IAAK7L,KAAKI,MAAMqK,kBAE3HhJ,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACIC,QAAS,cACT6H,UACItK,EAAAC,EAAAC,cAACF,EAAAC,EAAMsK,SAAP,KACIvK,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIO,UAAU,OACVN,QAAQ,QACRO,MAAM,kBAHV,aAKe5C,KAAKI,MAAM0G,cAAgB,SASlErF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,EAACE,GAAI,GAAIG,GAAI,EAAGC,GAAI,GAC1BnK,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,UAAW,GACdf,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAU5B,WAAW,cAChBhC,KAAKI,MAAMC,QAAQ4C,IAAI,SAAAuD,GAAM,OAC1B/E,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACsK,GAAA,EAAD,CACIC,QAAQ,SACRC,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhBC,aAAc7K,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQiE,MAAO,CAAEuE,OAAQ,OAAQC,MAAO,OAAQV,gBAAiBtF,EAAO9H,YAAe8H,EAAOjI,oBAG5GkD,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQ0I,IAAKjG,EAAOrI,KAAM6F,IAAKwC,EAAOnI,QAAS2J,MAAO,CAAEuE,OAAQ,OAAQC,MAAO,WAVvF,8CAkBpB/K,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EACXC,UAAU,MACVC,QAAQ,eACRC,WAAW,UACXP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,EAACE,GAAI,GAAIG,GAAI,EAAGC,GAAI,GAC1BnK,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,UAAW,GACdf,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAU5B,WAAW,cACjBP,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQiE,MAAO,CAAE8D,gBAAiB,YAAc9L,KAAKI,MAAM0G,cAAgB,IAE/ErF,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACIC,QAAS,QACT6H,UACItK,EAAAC,EAAAC,cAACF,EAAAC,EAAMsK,SAAP,KACIvK,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIO,UAAU,OACVN,QAAQ,QACRO,MAAM,kBAHV,qBAaxBnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,EAACE,GAAI,GAAIG,GAAI,EAAGC,GAAI,GAC1BnK,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,UAAW,GAEdf,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAU5B,WAAW,cACjBP,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQ1B,QAAQ,SAAS2F,MAAOhI,KAAKI,MAAMyL,YAAc,CAAEC,gBAAiB9L,KAAKI,MAAMyL,aAAgB,IAAvG,MAEJpK,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACIC,QAAQ,QACR6H,UACItK,EAAAC,EAAAC,cAACF,EAAAC,EAAMsK,SAAP,KACIvK,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAAC2F,GAAA,EAAD,CACI9D,SAAU,SAACC,GAAD,OAAOiD,EAAK5F,SAAS,CAAE+K,YAAapI,EAAEC,OAAOtE,SACvD0I,MAAOrG,EAAAC,EAAAC,cAACoG,GAAA,EAAD,MACPC,MAAO,CAAEC,SAAU,UAEnBxG,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAM,SAAhB,kCACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAM,OAAhB,sBACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAM,SAAhB,4BACAqC,EAAAC,EAAAC,cAACuG,GAAA,EAAD,CAAU9I,MAAM,OAAhB,gCAatCqC,EAAAC,EAAAC,cAAC+K,GAAD,CAAYrE,OAAQrI,KAAKI,MAAMiJ,cAEzC5H,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0J,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAG5J,WAAS,EAACC,UAAU,SAC1CC,QAAQ,eACRC,WAAW,WAEVhC,KAAKI,MAAMkJ,YAAYrG,IAAI,SAAAuD,GAAM,OAC9B/E,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUzE,IAAKqH,EAAOrI,MAClBsD,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQC,IAAKwC,EAAOnI,WAExBoD,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAcC,QAASsC,EAAOrI,OAC9BsD,EAAAC,EAAAC,cAACgL,GAAA,EAAD,KACIlL,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQiE,MAAO,CAAE8D,gBAAiBtF,EAAO9H,YAAc8H,EAAOhI,mBASrFwB,KAAKI,MAAM0G,cAAgB,EAAIrF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAWsK,UAAU,GACjDnL,EAAAC,EAAAC,cAACkL,GAAAnL,EAAD,CACIoL,MAAOrL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYO,UAAU,KAAKN,QAAQ,KAAKO,MAAM,UAAUC,cAAY,GAApE,aAGPuF,KAAMpI,KAAKI,MAAMgJ,WACjB2D,QAAS/M,KAAKI,MAAM+I,cACpB6D,QAAS,CACLC,WAAY,WACZC,YAAa,GACbC,aAAa,EACbC,gBAAgB,EAChBC,sBAAsB,EACtB/C,MAAM,MAGH,aA7ST9F,IAAMC,WAkTTC,eAAWmE,cCnTxByE,OAAOC,UAAU5C,SAAW,WAC1B,IAAI6C,EAAU3H,SAAS7F,KAAM,IACzByN,EAAUC,KAAKC,MAAMH,EAAU,MAC/BI,EAAUF,KAAKC,OAAOH,EAAmB,KAARC,GAAiB,IAClDlE,EAAUiE,EAAmB,KAARC,EAA2B,GAAVG,EAK1C,OAHIH,EAAU,KAAKA,EAAU,IAAIA,GAC7BG,EAAU,KAAKA,EAAU,IAAIA,GAC7BrE,EAAU,KAAKA,EAAU,IAAIA,GAC1BkE,EAAM,IAAIG,EAAQ,IAAIrE,GAGjC,IAAMsE,GAAOC,cAEbC,IAASC,OAAOvM,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CAAQ5M,QAASwM,IAC7BpM,EAAAC,EAAAC,cAACuM,EAAA,EAAD,KAIAzM,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAChB3M,EAAAC,EAAAC,cAAC0M,GAAD,OAEF5M,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOE,KAAK,cACV3M,EAAAC,EAAAC,cAAC2M,GAAD,OAEF7M,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOE,KAAK,KACR3M,EAAAC,EAAAC,cAAC0M,GAAD,SAGGE,SAASC,eAAe,SPoF7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.943dc9be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Parmar.b6aad3d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Maadi.8ad40e89.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Harshit.a15bf8da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Shanky.dd0e4a66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Baby.9bea3725.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Shivi.a5f30007.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Vikas.783a3bfc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mudit.179b5202.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Nabh.760dacc1.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Parmar from '../src/constants/images/Parmar.jpg'\nimport Maadi from '../src/constants/images/Maadi.jpg'\nimport Nabh from '../src/constants/images/Nabh.jpg'\nimport Harshit from '../src/constants/images/Harshit.jpg'\nimport Shanky from '../src/constants/images/Shanky.jpg'\nimport Baby from '../src/constants/images/Baby.jpg'\nimport Shivi from '../src/constants/images/Shivi.jpg'\nimport Vikas from '../src/constants/images/Vikas.jpg'\nimport Mudit from '../src/constants/images/Mudit.jpg'\n\nconst players = [\n    {\n        \"ID\": 0,\n        \"Name\": \"Parmar\",\n        \"IsMF\": true,\n        \"Profile\": Parmar,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#f06292\"\n    },\n    {\n        \"ID\": 1,\n        \"Name\": \"Sanket\",\n        \"IsMF\": true,\n        \"Profile\": Shanky,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,        Scores: [],\n        \"ColorCode\": \"#37474f\"\n    },\n    {\n        \"ID\": 2,\n        \"Name\": \"Harshit\",\n        \"IsMF\": false,\n        \"Profile\": Harshit,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#1976d2\"\n    },\n    {\n        \"ID\": 3,\n        \"Name\": \"Maadi\",\n        \"IsMF\": false,\n        \"Profile\": Maadi,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#2e7d32\"\n    },\n    {\n        \"ID\": 4,\n        \"Name\": \"Himanshu\",\n        \"IsMF\": false,\n        \"Profile\": \"\",\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#f57c00\"\n    },\n    {\n        \"ID\": 5,\n        \"Name\": \"Baby\",\n        \"IsMF\": false,\n        \"Profile\": Baby,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#ff5722\"\n    },\n    {\n        \"ID\": 6,\n        \"Name\": \"Shivi\",\n        \"IsMF\": false,\n        \"Profile\": Shivi,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#424242\"\n    },\n    {\n        \"ID\": 7,\n        \"Name\": \"Mudit\",\n        \"IsMF\": false,\n        \"Profile\": Mudit,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#424242\"\n    },\n    {\n        \"ID\": 8,\n        \"Name\": \"Vikas\",\n        \"IsMF\": false,\n        \"Profile\": Vikas,\n        \"CurrentRoundScore\": 0,\n        \"TotalScore\": 0,\n        Scores: [],\n        \"ColorCode\": \"#424242\"\n    }\n]\nexport default players;","function setValue(key, value){\n    console.log(value);\n    localStorage.setItem(key, JSON.stringify(value));\n}\n\nfunction getValue(key){\n    return JSON.parse(localStorage.getItem(key))\n}\n\n\nexport {setValue, getValue};","import React from 'react';\nimport { Grid, Typography, Container, AppBar, Toolbar, Avatar, Paper, Link, Card, CardContent, CardActions, Button } from '@material-ui/core';\nimport { List, ListItem, ListItemAvatar, FormGroup, ListItemText, Collapse, IconButton, FormControl, Checkbox, FormHelperText, FormControlLabel } from '@material-ui/core';\nimport players from '../players.js';\nimport {withRouter } from \"react-router-dom\";\nimport { setValue, getValue } from '../data-access-layer/storage-helper'\nimport uuidv from 'uuid';\n\nclass GamesHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            Players: players,\n            Game: \"Judgement\"\n        }\n        this.startGame = this.startGame.bind(this);\n    }\n    componentDidMount() {\n        let CurrentPlayers = players;\n        CurrentPlayers.forEach(player=>{\n            player.IsPlaying = false;\n        })\n        this.setState({players: CurrentPlayers});\n    }\n    startGame() {\n        let CurrentPlayers = players;\n        let TotalPlayers = 0;\n        let GamePlayers = [];\n        CurrentPlayers.forEach(player=>{\n            if(player.IsPlaying){\n                TotalPlayers++;\n                GamePlayers.push(player)\n            }\n        });\n        if(TotalPlayers > 3 && TotalPlayers < 10){\n            let GameId = uuidv.v4();\n            setValue(GameId, {Players: GamePlayers});\n            this.props.history.push('/'+this.state.Game+'/'+GameId);\n        }else{\n            this.setState({hasError: true, errorInfo: \"Player count not suitable for the game\"})\n        }\n    }\n    render() {\n\n        return (\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\">\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            Home\n    </Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <Container>\n                    <Paper elevation={3}>\n                        <Card>\n                            <CardContent>\n                                <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>Select players</Typography>\n                                <FormControl required component=\"fieldset\">\n                                    <FormGroup>\n                                        {this.state.Players.map((player, index) =>\n                                            <FormControlLabel\n                                                control={<Checkbox checked={player.IsPlaying} value={player.Name} id={index} onChange={(e) => {\n                                                    let CurrentPlayers = this.state.Players;\n                                                    CurrentPlayers[e.target.id].IsPlaying = e.target.checked;\n                                                    this.setState({ players: CurrentPlayers })\n                                                }} />}\n                                                label={<ListItem button>\n                                                    <ListItemAvatar>\n                                                        <Avatar src={player.Profile} />\n                                                    </ListItemAvatar>\n                                                    <ListItemText primary={player.Name} />\n                                                </ListItem>}\n                                            />\n                                        )}\n                                    </FormGroup>\n                                    <FormHelperText error={this.state.hasError}>{this.state.errorInfo}</FormHelperText>\n                                </FormControl>\n                            </CardContent>\n                            <CardActions>\n                                <Button variant=\"contained\" color=\"primary\" onClick={this.startGame}>\n                                    Start Game\n                  </Button>\n                            </CardActions>\n                        </Card>\n                    </Paper>\n                </Container>\n            </Grid>\n\n\n        )\n    }\n}\nexport default withRouter(GamesHome);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { FormControl, InputLabel, Select, MenuItem, Checkbox, FormControlLabel, FormLabel, FormGroup } from '@material-ui/core';\nimport { Input, Dialog, DialogTitle, DialogContent, DialogActions,FormHelperText } from '@material-ui/core';\nclass StepperForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeStep: 0,\n            players: this.props.players,\n            IsPlaying: this.props.RoundInProgress,\n            hasError: false,\n            errorInfo: null,\n            TotalHands:0,\n        }\n        this.handleBeforeRoundSubmit = this.handleBeforeRoundSubmit.bind(this);\n        this.handleAfterRoundSubmit = this.handleAfterRoundSubmit.bind(this);\n    }\n    handleBeforeRoundSubmit(){\n        try{\n        let players = this.state.players;\n        let flag = true;\n        let TotalHands = 0;\n        for(let player of players){\n            if(this.state.hasOwnProperty(player.ID)){\n                player.CurrentRoundScore = parseInt(this.state[player.ID])\n                TotalHands+=this.state[player.ID]\n            }else{\n                flag = false\n                break\n            }\n        }\n        if(flag && parseInt(52 / this.state.players.length) != parseInt(TotalHands)){\n            this.props.handleScoreUpload(this.state);\n        }else{\n            this.setState({hasError: true, errorInfo: \"Invalid hands:\" + TotalHands.toString(), activeStep:0})\n        }\n    }catch(e){\n        this.setState({hasError: true, errorInfo: \"Bhakk\"})\n    }\n    }\n\n    handleAfterRoundSubmit(){\n        let Players = this.state.players;\n        let flag = true;\n        for(let Player of Players){\n            if(!this.state[Player.ID]){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            this.setState({hasError: true, errorInfo: \"Bhakk\"})\n        }else{\n            // Players.forEach(Player => Player.CurrentRoundScore = this.state[Player.ID] ? 10 + parseInt(Player.CurrentRoundScore): 0)\n            // console.log(this.state)\n            // console.log(Players)\n            this.props.handleScoreUpload(this.state);\n        }\n    }\n    componentDidMount(){\n        if(this.state.IsPlaying){\n            this.state.players.forEach(player => this.setState({[player.ID]: true}))\n        }\n    }\n    render() {\n        if(this.state.IsPlaying){\n            return(<Dialog open={true}>\n                <DialogTitle>Results for Round: <strong>{this.props.currentRounds + 1}</strong> </DialogTitle>\n                <DialogContent>\n                    <form>\n        <FormControl required component=\"fieldset\">\n        <FormLabel component=\"legend\">Unselect failures</FormLabel>\n        <FormGroup>\n            {this.state.players.map((player, index)=>\n          <FormControlLabel\n          control={<Checkbox checked={this.state[player.ID]} onChange={(e) => this.setState({[e.target.value]: !this.state[e.target.value]})} value={player.ID} />}\n          label={player.Name}\n        />\n            )}\n        </FormGroup>\n        <FormHelperText error={this.state.hasError}>{this.state.errorInfo}</FormHelperText>\n      </FormControl>\n                    </form>\n                </DialogContent>\n                <DialogActions>\n                    <div>\n                        <div>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleAfterRoundSubmit}>\n                                Submit\n                            </Button>\n                            <Button\n                            variant=\"container\" color=\"secondary\"\n                            onClick={this.props.handleBack}\n                            >\n                                Back\n                        </Button>\n    \n                        </div>\n                    </div>\n                </DialogActions>\n            </Dialog>)\n        }\n        return (<Dialog disableBackdropClick disableEscapeKeyDown open={true}>\n            <DialogTitle>Hands for Round: <strong>{this.props.currentRounds + 1}</strong> </DialogTitle>\n            <DialogContent>\n                \n                <form>\n                <FormLabel component=\"legend\">Total Hands: {this.state.TotalHands}</FormLabel>\n\n                <FormControl required component=\"fieldset\">\n        <FormGroup>\n            {this.state.players.map((Player, index)=>\n            <FormControl required>\n    <InputLabel>{Player.Name}</InputLabel>\n            <Select\n            id={Player.ID}\n            name={Player.ID}\n            onChange={(e)=> {\n                let players = this.state.players;\n                let TotalHands = e.target.value;\n                for(let player of players){\n                    if(this.state.hasOwnProperty(player.ID)){\n                        if(!(e.target.name == player.ID)){\n                            TotalHands+=this.state[player.ID]\n                        }\n                    }\n                }\n                this.setState({[Player.ID]: e.target.value, TotalHands: TotalHands})\n            }}\n                value={this.state[Player.ID]}\n                input={<Input id={Player.ID}/>}\n                style={{ minWidth: '200px' }}>\n                <MenuItem value={0}>0</MenuItem>\n                <MenuItem value={1}>1</MenuItem>\n                <MenuItem value={2}>2</MenuItem>\n                <MenuItem value={3}>3</MenuItem>\n                <MenuItem value={4}>4</MenuItem>\n                <MenuItem value={5}>5</MenuItem>\n                <MenuItem value={6}>6</MenuItem>\n                <MenuItem value={7}>7</MenuItem>\n            </Select>\n        </FormControl>\n            )}\n        </FormGroup>\n        <FormHelperText error={this.state.hasError}>{this.state.errorInfo}</FormHelperText>\n      </FormControl>\n                </form>\n\n            </DialogContent>\n            <DialogActions>\n                <div>\n                    <div>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleBeforeRoundSubmit}>\n                                Submit\n                            </Button>\n                            <Button\n                            variant=\"container\" color=\"secondary\"\n                            onClick={this.props.handleBack}\n                            >\n                                Back\n                        </Button>\n                    </div>\n                </div>\n            </DialogActions>\n        </Dialog>)\n    }\n}\n\n\nexport default StepperForm;","import * as React from 'react';\nimport {\n  Chart,\n  BarSeries,\n  ArgumentAxis,\n  ValueAxis,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Animation } from '@devexpress/dx-react-chart';\n\n\nexport default class ScoreGraph extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: this.props.scores\n    };\n  }\n  componentDidMount(){\n  }\n  render() {\n\n    // if(this.props.RoundInProgress){\n    const { data: chartData } = this.state;\n    if(chartData.length > 0){\n      return(<Chart\n        data={chartData}\n      >\n        <ArgumentAxis />\n        <ValueAxis max={140} />\n               <BarSeries \n        valueField=\"TotalScore\"\n        argumentField=\"Name\"\n        color=\"#3f51b5\"\n        />\n        <Animation />\n      </Chart>)\n    }\n    // }\n    return(null);\n\n  }\n}","import React from 'react';\nimport { Grid, Typography, Container, AppBar, Toolbar, Avatar, Paper, FormControl, Card, CardContent, InputLabel, FormHelperText } from '@material-ui/core';\nimport { Button, ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction, Switch, Badge, Select, Input, MenuItem } from '@material-ui/core';\nimport players from '../players.js';\nimport MUIDataTable from \"mui-datatables\";\nimport HorizontalLabelPositionBelowStepper from '../Components/StepperForm'\nimport { setValue, getValue } from '../data-access-layer/storage-helper'\nimport { withRouter } from \"react-router-dom\";\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite';\nimport ScoreGraph from '../Components/ScoreGraph'\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        let URLPath = this.props.location.pathname.split(\"/\");\n        this.state = {\n            GameId: URLPath[URLPath.length - 1],\n            GameStarted: false,\n            RoundInProgress: false,\n            openPlayerHandler: false,\n            Players: [],\n            currentRounds: 0,\n            table_headers: [],\n            table_data: [],\n            chart_data: [],\n            leaderboard: [],\n            seconds: 0\n        }\n        this.updateScorecard = this.updateScorecard.bind(this);\n    }\n    tick() {\n        this.setState(state => ({\n            seconds: state.seconds + 1\n        }));\n    }\n    componentDidMount() {\n        try {\n            this.interval = setInterval(() => this.tick(), 1000);\n            let Config = getValue(this.state.GameId)\n            if (Config) {\n                Object.keys(Config).map(key => {\n                    this.setState({ [key]: Config[key] })\n                })\n            }\n        } catch (error) {\n            this.props.history.push('/')\n        }\n    }\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n    updateScorecard(data) {\n        let CurrentPlayers = this.state.Players;\n        if (this.state.RoundInProgress) {\n            let headers = [\"#\"];\n            let table_data = [];\n            let chart_data = [];\n            CurrentPlayers.map((Player, index) => {\n                Player.CurrentRoundScore = data[Player.ID] ? Player.CurrentRoundScore += 10 : 0;\n                Player.Scores.push(Player.CurrentRoundScore)\n                Player.TotalScore += Player.CurrentRoundScore\n                Player.CurrentRoundScore = 0;\n                chart_data.push({\n                    \"Name\": Player.Name,\n                    \"TotalScore\": Player.TotalScore,\n                })\n                headers.push(Player.Name)\n            })\n            for (let i = CurrentPlayers[0].Scores.length - 1; i >= 0; i--) {\n                let table_row = []\n                table_row.push(i + 1)\n                for (let j = 0; j < CurrentPlayers.length; j++) {\n                    table_row.push(CurrentPlayers[j].Scores[i])\n                }\n                table_data.push(table_row);\n            }\n            let Leaderboard = CurrentPlayers.sort((Player1, Player2) => {\n                return Player2.TotalScore - Player1.TotalScore\n            })\n            let state = { Players: CurrentPlayers, table_headers: headers, table_data: table_data, chart_data: chart_data, currentRounds: this.state.currentRounds + 1, RoundInProgress: false, openPlayerHandler: false, leaderboard: Leaderboard, seconds: this.state.seconds }\n            this.setState(state);\n            setValue(this.state.GameId, state);\n        } else {\n            let TotalRoundScore = 0;\n            CurrentPlayers.map((Player, index) => {\n                Player.CurrentRoundScore = data[Player.ID]\n                TotalRoundScore += data[Player.ID]\n            })\n            this.setState({ Players: CurrentPlayers, RoundInProgress: true, openPlayerHandler: false, TotalRoundScore: TotalRoundScore });\n        }\n    }\n    render() {\n        return (<Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n        >\n            {this.state.openPlayerHandler ? <HorizontalLabelPositionBelowStepper handleScoreUpload={this.updateScorecard} players={this.state.Players} RoundInProgress={this.state.RoundInProgress} handleBack={() => this.setState({ openPlayerHandler: false })} currentRounds={this.state.currentRounds} /> : null}\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Container>\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                        >\n                            <Typography variant=\"h5\">\n                                Judgement\n    </Typography>\n                            <Typography variant=\"h6\">\n                                {this.state.seconds.toString().toHHMMSS()}\n                            </Typography>\n                        </Grid>\n                    </Container>\n                </Toolbar>\n                <BottomNavigation\n                    value={\"Recents\"}\n                    onChange={(event, newValue) => {\n                        // setValue(newValue);\n                    }}\n                    showLabels\n                >\n                    <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} />\n                    {this.state.currentRounds > 0 ? <BottomNavigationAction label=\"End game\" icon={<AppsIcon />} onClick={() => this.setState({ GameStarted: false })} /> : <BottomNavigationAction label=\"Start game\" icon={<PlayCircleFilledWhiteIcon />} onClick={() => this.setState({ openPlayerHandler: true })} />}\n\n                    <BottomNavigationAction icon={<Typography component=\"div\">\n                        <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n                            <Grid item>End</Grid>\n                            <Grid item>\n                                <Switch\n                                    checked={this.state.RoundInProgress ? true : false}\n                                    onChange={() => this.setState({ openPlayerHandler: true })}\n                                    value=\"Start\"\n                                />\n                            </Grid>\n                            <Grid item>Start</Grid>\n                        </Grid>\n                    </Typography>} />\n\n                </BottomNavigation>\n\n            </AppBar>\n\n            <Grid\n                container\n                direction=\"row\"\n            >\n                <Grid item xs={12} sm={8}>\n                    {this.state.RoundInProgress ?\n                        // <Container maxWidth=\"lg\" style={{minHeight: '100%'}}>\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"space-evenly\"\n                            alignItems=\"stretch\"\n                            style={{ minHeight: '100%' }}\n                        >\n                            <Grid container\n                                direction=\"row\"\n                                justify=\"space-evenly\"\n                                alignItems=\"center\"\n                            >\n                                {/* Chart */}\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n\n\n                                        <ListItem alignItems=\"flex-start\">\n                                            <ListItemAvatar>\n                                                <Avatar variant=\"square\" style={this.state.trump_color ? { backgroundColor: this.state.trump_color } : {}}>{this.state.TotalRoundScore}</Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={\"Hands total\"}\n                                                secondary={\n                                                    <React.Fragment>\n                                                        <Typography\n                                                            component=\"span\"\n                                                            variant=\"body2\"\n                                                            color=\"text secondary\"\n                                                        >\n                                                            for round {this.state.currentRounds + 1}\n                                                        </Typography>\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                        </ListItem>\n                                    </Paper>\n                                </Grid>\n\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n                                        <ListItem alignItems=\"flex-start\">\n                                            {this.state.Players.map(Player =>\n                                                <ListItemAvatar>\n                                                    <Badge\n                                                        overlap=\"circle\"\n                                                        anchorOrigin={{\n                                                            vertical: 'bottom',\n                                                            horizontal: 'right',\n                                                        }}\n                                                        badgeContent={<Avatar style={{ height: '22px', width: '22px', backgroundColor: Player.ColorCode }} >{Player.CurrentRoundScore}</Avatar>}\n                                                    >\n\n                                                        <Avatar alt={Player.Name} src={Player.Profile} style={{ height: '40px', width: '40px' }} />\n                                                    </Badge>                                    </ListItemAvatar>)}\n                                        </ListItem>\n\n                                    </Paper>\n                                </Grid>\n\n                            </Grid>\n                            <Grid container\n                                direction=\"row\"\n                                justify=\"space-evenly\"\n                                alignItems=\"center\">\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n                                        <ListItem alignItems=\"flex-start\">\n                                            <ListItemAvatar>\n                                                <Avatar style={{ backgroundColor: '#ff5722' }}>{this.state.currentRounds + 1}</Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary={\"Round\"}\n                                                secondary={\n                                                    <React.Fragment>\n                                                        <Typography\n                                                            component=\"span\"\n                                                            variant=\"body2\"\n                                                            color=\"text secondary\"\n                                                        >\n                                                            in progress\n  </Typography>\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                        </ListItem>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={12} md={4} lg={3}>\n                                    <Paper elevation={3}>\n\n                                        <ListItem alignItems=\"flex-start\">\n                                            <ListItemAvatar>\n                                                <Avatar variant=\"square\" style={this.state.trump_color ? { backgroundColor: this.state.trump_color } : {}}>T</Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                                primary=\"Trump\"\n                                                secondary={\n                                                    <React.Fragment>\n                                                        <FormControl>\n                                                            <Select\n                                                                onChange={(e) => this.setState({ trump_color: e.target.value })}\n                                                                input={<Input />}\n                                                                style={{ minWidth: '120px' }}\n                                                            >\n                                                                <MenuItem value=\"black\">हुकुम</MenuItem>\n                                                                <MenuItem value=\"red\">पान</MenuItem>\n                                                                <MenuItem value=\"black\">चिडी</MenuItem>\n                                                                <MenuItem value=\"red\">ईंट</MenuItem>\n                                                            </Select>\n                                                        </FormControl>\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                        </ListItem>\n                                    </Paper>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        // </Container>\n                        : <ScoreGraph scores={this.state.chart_data} />}\n                </Grid>\n                <Grid item xs={12} sm={4} container direction=\"column\"\n                    justify=\"space-evenly\"\n                    alignItems=\"stretch\">\n                    {/* <List> */}\n                    {this.state.leaderboard.map(Player =>\n                        <ListItem key={Player.Name}>\n                            <ListItemAvatar>\n                                <Avatar src={Player.Profile} />\n                            </ListItemAvatar>\n                            <ListItemText primary={Player.Name} />\n                            <ListItemSecondaryAction>\n                                <ListItemAvatar>\n                                    <Avatar style={{ backgroundColor: Player.ColorCode }}>{Player.TotalScore}</Avatar>\n                                </ListItemAvatar>\n                            </ListItemSecondaryAction>\n                        </ListItem>)}\n                    {/* </List> */}\n                </Grid>\n            </Grid>\n\n\n            {this.state.currentRounds > 0 ? <Container maxWidth={false}>\n                <MUIDataTable\n                    title={<Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n                        Scorecard\n</Typography>}\n                    data={this.state.table_data}\n                    columns={this.state.table_headers}\n                    options={{\n                        filterType: 'checkbox',\n                        rowsPerPage: 20,\n                        fixedHeader: true,\n                        selectableRows: false,\n                        selectableRowsHeader: false,\n                        sort: false\n                    }}\n                />\n            </Container> : null}\n        </Grid>)\n\n    }\n}\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { createBrowserHistory } from \"history\";\n\nimport Home from './Views/Home';\nimport Judgement from './Views/Judgement';\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n  } from \"react-router-dom\";\n  String.prototype.toHHMMSS = function () {\n    var sec_num = parseInt(this, 10); // don't forget the second param\n    var hours   = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours   < 10) {hours   = \"0\"+hours;}\n    if (minutes < 10) {minutes = \"0\"+minutes;}\n    if (seconds < 10) {seconds = \"0\"+seconds;}\n    return hours+':'+minutes+':'+seconds;\n}\n\nconst hist = createBrowserHistory();\n\nReactDOM.render(<Router history={hist}>\n    <Switch>\n      {/* {routes.map((route) => (\n<Route exact key={route.Name} component={route.View} path={route.Route} />\n  ))} */}\n    <Route exact path=\"/Home\">\n      <Home/>\n    </Route>\n    <Route path=\"/Judgement\">\n      <Judgement/>\n    </Route>\n    <Route path=\"*\">\n        <Home />\n    </Route>\n  </Switch>\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}